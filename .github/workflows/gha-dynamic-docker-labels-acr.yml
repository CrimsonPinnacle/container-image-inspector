# This workflow will build and push a new container image to Azure Container Registry (ACR). During the build
# of the image the committer's GitHub handle, the commit SHA, and a link to the Dockerfile will be added
# as labels to the image.
#
# To use this workflow, you will need to complete the following set-up steps:
#
# 1. Create a registry in Azure Container Registry (ACR) to store your container images.
#
# 2. Create a service principal in Azure and give it Contributor access to the ACR 
#    For instructions on setting up service principal see: https://docs.microsoft.com/en-us/azure/container-registry/container-registry-auth-service-principal
#
# 3. Store your Azure credentials in GitHub Actions secrets named `AZURE_CREDENTIALS`. 
#    For instructions on setting up secrets see: https://developer.github.com/actions/managing-workflows/storing-secrets/
#
# 4. Store the service principal application ID and application secret in GitHub Actions secrets named `ACR_REGISTRY_USERNAME` and `ACR_REGISTRY_SECRET`.
#    For instructions on setting up secrets see: https://developer.github.com/actions/managing-workflows/storing-secrets/
#
# 5. Store the ACR login server inGitHub Actions secret named `ACR_REGISTRY_LOGIN_SERVER`.
#    For instructions on setting up secrets see: https://developer.github.com/actions/managing-workflows/storing-secrets/
#
# 6. Store your ACR repository name in GitHub Actions secret named `ACR_REPOSITORY_NAME`.
#    For instructions on setting up secrets see: https://developer.github.com/actions/managing-workflows/storing-secrets/
#
# 7. Create a pull request or push to a development branch. 
#

name: Dynamic Docker Labels - Azure Container Registry

on:
  push:
    branches:
      - development
  pull_request:
    branches:
      - development

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    steps:

    # Builds the URL to the Dockerfile used to build the image
    - name: 'Set environment variable for Dockerfile URL for push'
      if: ${{ github.event_name == 'push' }}
      run: echo "DOCKERFILE_URL=${GITHUB_SERVER_URL}/${GITHUB_REPOSITORY}/blob/${GITHUB_REF#refs/*/}/samples/dynamic-labels/Dockerfile" >> $GITHUB_ENV

    - name: 'Set environment variable for Dockerfile URL for pull request'
      if: ${{ github.event_name == 'pull_request' }}
      run: echo "DOCKERFILE_URL=${GITHUB_SERVER_URL}/${GITHUB_REPOSITORY}/blob/${GITHUB_BASE_REF#refs/*/}/samples/dynamic-labels/Dockerfile" >> $GITHUB_ENV

    - name: 'Checkout GitHub Action'
      uses: actions/checkout@v2
    
    - name: 'Login via Azure CLI'
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    - name: Build and push
      id: docker_build
      uses: azure/docker-login@v1
      with:
        login-server: ${{ secrets.ACR_REGISTRY_LOGIN_SERVER }}
        username: ${{ secrets.ACR_REGISTRY_USERNAME }}
        password: ${{ secrets.ACR_REGISTRY_PASSWORD }}
      run: |
        docker build -f ./samples/dynamic-labels/Dockerfile -t ${{ secrets.ACR_REGISTRY_LOGIN_SERVER }}/${{ secrets.ACR_REPOSITORY_NAME }}:build-${{ github.run_number }} --build-arg IMAGE_COMMITTER=${{ github.actor }} --build-arg IMAGE_DOCKERFILE=${{ env.DOCKERFILE_URL }} --build-arg IMAGE_COMMIT_SHA=${{ github.sha }}
        docker push ${{ secrets.ACR_REGISTRY_LOGIN_SERVER }}/${{ secrets.ACR_REPOSITORY_NAME }}:build-${{ github.run_number }}

    - name: Output image digest
      run: echo ${{ steps.docker_build.outputs.digest }}
